#!/usr/bin/env ruby
=begin
"svnbr" is a Subversion utility to operate branches.

Usage: svnbr <subcommand> [<option>] [<args>]

 <branch-name> :  /branches/<branch-name> or trunk
 <tag-name>    :  /tags/<tag-name>

 1. list branches
 > svnbr [list | branches]

 2. list tags
 > svnbr tags

 3. switch to branch or tag after craete /branches/<branch-name> (if missing)
 > svnbr sw <branch-name> [--from-tag=<tag-name>] [--additional-message=<message>]
 > svnbr sw <tag-name>

 4. create /tags/<tag-name>
 > svnbr tag <tag-name> [--additional-message=<message>]

 5. delete branch or tag
 > svnbr (del | rm) (<branch-name> | <tag-name>)

 6. move branch or tag (if force)
 > svnbr mv <old-branch-name> <new-branch-name>
 > svnbr mv (--force | -f) <tag-name> <branch-name>

 7. view log
 > svnbr log [<branch-name> | <tag-name>]

 8. merge
 > svnbr merge (<branch-name> | <tag-name>) -c M[,N...]
 > svnbr merge (<branch-name> | <tag-name>) -r M:N

 9. diff
 > svnbr diff (<branch-name> | <tag-name>) <file>
=end

require 'rubygems'
require 'optparse'
require 'rexml/document'

class Branch
  def repo var
    @doc = REXML::Document.new(svn("info --xml")) unless @doc
    repo = Hash.new
    repo[:url]=@doc.elements['/info/entry/url'].text
    repo[:root]=repo[:url].gsub(/(\/trunk$|\/branches\/.+$|\/tags\/.+$)/,'')
    repo[var]
  end

  def current
    name(repo(:url))
  end

  def list
    return @branches if @branches
    @branches = Array.new
    root = repo(:root)
    doc = REXML::Document.new(svn("list #{root}/branches --xml"))
    REXML::XPath.each(doc,'//name/text()') do |name|
      @branches << name.to_s
    end
    @branches << "trunk"
  end

  def tags
    return @tags if @tags
    @tags = Array.new
    root = repo(:root)
    doc = REXML::Document.new(svn("list #{root}/tags --xml"))
    REXML::XPath.each(doc,'//name/text()') do |name|
      @tags << name.to_s
    end
    @tags
  end

  def rm name
    svn_exec("rm " << uri(name) << " -m 'remove branch #{name}'",true)
  end

  def mv(from,to,force = false)
    raise "from: '#{from}' not found." if force ? !exists?(from) : !list.include?(from)
    raise "to: '#{to}' already exists." if !force && exists?(to)
    rm(to) if list.include?(to)
    svn_exec("mv " << uri(from) << " " << uri(to) << " -m 'move branch #{from} to #{to}'",true)
  end

  def log(name)
    svn_exec("log " << uri(name) << " --stop-on-copy",true)
  end

  def name uri
    if /^\/trunk\/?/ =~ uri[repo(:root).length..-1]
      return "trunk"
    end
    return uri.gsub(repo(:root)+"/","").gsub(/(branches|tags)\//,"")
  end

  def uri name
    # existing url
    if name == "trunk"
      return repo(:root) << "/trunk"
    end
    if list.include?(name)
      return repo(:root) << "/branches/" << name
    end
    if tags.include?(name)
      return repo(:root) << "/tags/" << name
    end
    # non-existing url
    repo(:root) << "/branches/" << name
  end

  def exists? name
    list.include?(name) || tags.include?(name)
  end

  def rootdir
    while uri(current) != repo(:url)
      FileUtils.cd('..')
      @doc = nil
    end
  end

  def switch name,tag_name = nil, additional_message = nil
    from = current
    from_uri = uri(current)
    if tag_name
      raise "tag_name: '#{tag_name}' not found." unless tags.include?(tag_name)
      from = tag_name
      from_uri = repo(:root) << "/tags/" << tag_name
    end

    svn_exec("cp -m 'make #{name} branch from #{from} #{additional_message}' %s %s" %
             [from_uri,uri(name)],true) unless exists?(name)
    unless current == name
      rootdir
      svn_exec("sw --ignore-externals " << uri(name),true)
    end
  end

  def tag tag_name, additional_message = nil
    raise "tag_name: '#{tag_name}' already exists." if exists?(tag_name)

    from_name = current
    from_uri = uri(current)
    tag_uri = repo(:root) << "/tags/" << tag_name
    svn_exec("cp -m 'make #{tag_name} tag from #{from_name}. #{additional_message}' %s %s" %
             [from_uri,tag_uri],true)
  end

  def merge_cs name,cs
    rootdir
    svn_exec("merge -c #{cs}  " << uri(name),true)
  end

  def merge_rev name,rev
    rootdir
    svn_exec("merge -r #{rev}  " << uri(name),true)
  end

  def diff name,file
    rootdir
    svn_exec("diff %s %s" % [uri(current),uri(name)],true)
  end

private
  def svn param
    r = `svn #{param}`
    raise if $?.to_i > 0
    r
  end

  def svn_exec param,show = false
    puts "svn #{param}" if show
    system("svn #{param}")
  end
end

module Commands
  class << self
  private
    def alias_module_function(new, old)
      alias_method new, old
      module_function new
    end

    def br
      @@br ||= Branch.new
    end

    def opt
      @@opt = OptionParser.new
    end
  end

module_function
  def switch
    tag = nil
    opt.on('--from-tag=VAL') { |v| tag = v }
    additional_message = nil
    opt.on('--additional-message=VAL') { |v| additional_message = v }
    opt.parse!

    name = ARGV.shift
    br.switch(name,tag,additional_message)
  end
  alias_module_function :sw, :switch

  def tag
    name = ARGV.shift
    additional_message = nil
    opt.on('--additional-message=VAL') { |v| additional_message = v }
    opt.parse!
    if name
      br.tag(name,additional_message)
    else
      tags
    end
  end

  def mv
    force = false
    opt.on('--force') { force = true }
    opt.parse!
    from = ARGV.shift
    to  = ARGV.shift
    br.mv(from,to,force)
  end

  def rm
    name = ARGV.shift
    br.rm(name)
  end
  alias_module_function :del, :rm

  def log
    name = ARGV.shift
    name = br.current unless name
    br.log(name)
  end

  def diff
    name = ARGV.shift
    file = ARGV.shift
    br.diff(name,file)
  end

  def tags
    br.tags.each do |i|
      mark = (i == br.current) ? '* ' : '  '
      puts mark << i
    end
  end

  def merge
    mode = nil;r=nil;
    opt.on('-r=VAL') { |v| r = v ; mode = "r" }
    opt.on('-c=VAL') { |v| r = v ; mode = "c" }
    opt.parse!
    name = ARGV.shift
    br.merge_rev(name,r) if mode == "r"
    br.merge_cs(name,r)  if mode == "c"
  end

  def list
    br.list.each do |i|
      mark = (i == br.current) ? '* ' : '  '
      puts mark << i
    end
  end
  alias_module_function :branches, :list

  def help
    emdoc = false
    IO.foreach($0) { |line|
      line.chomp!
      if emdoc
        abort if line == '=end'
        puts line
      elsif line == '=begin'
        emdoc = true
      end
    }
  end
end

cmd = ARGV.shift || 'list'
if Commands.respond_to? cmd
  Commands.send(cmd)
else
  Commands.help
end
